datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String          @id @default(cuid())
  email                     String?         @unique
  username                  String?         @unique
  isEmailVerified           Boolean         @default(false)
  emailVerificationSentAt   DateTime?
  passwordResetSentAt       DateTime?
  stripeId                  String?
  checkoutSessionId         String?
  hasPaid                   Boolean         @default(false)
  sendEmail                 Boolean         @default(false)
  datePaid                  DateTime?
  credits                   Int             @default(3)
  isAdmin                   Boolean         @default(false)
  
  tasks                     Task[]
  gptResponses              GptResponse[]
  files                     File[]
  contactFormMessages       ContactFormMessage[]
  
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
}

model GptResponse {
  id            String   @id @default(cuid())
  content       String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Task {
  id          String   @id @default(cuid())
  description String
  time        String   @default("1")
  isDone      Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model File {
  id          String   @id @default(cuid())
  name        String
  type        String
  key         String
  uploadUrl   String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}



model ContactFormMessage {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
  isRead                    Boolean         @default(false)
  repliedAt                 DateTime?
}

model DailyStats {
  id                     Int       @id @default(autoincrement())
  date                   DateTime  @unique
  totalViews             Int       @default(0)
  prevDayViewsChangePercent String @default("0")
  userCount              Int       @default(0)
  paidUserCount          Int       @default(0)
  userDelta              Int       @default(0)
  paidUserDelta          Int       @default(0)
  totalRevenue           Float     @default(0)
  totalProfit            Float     @default(0)
  sources                PageViewSource[]
  
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  
  @@map("daily_stats")
}

model Logs {
  id        String   @id @default(cuid())
  message   String
  level     String
  
  createdAt DateTime @default(now())
}

model PageViewSource {
  id               String     @id @default(cuid())
  name             String
  visitors         Int
  dailyStats       DailyStats @relation(fields: [dailyStatsId], references: [id], onDelete: Cascade)
  dailyStatsId     Int
  
  @@map("page_view_source")
}
